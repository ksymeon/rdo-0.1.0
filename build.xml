<?xml version="1.0"?>

<!-- ================================================================== -->
<!-- ================================================================== -->
<!-- ====RDO Ant Build file                                             -->
<!-- ================================================================== -->
<!-- ================================================================== -->

<project name="rdo-lib" default="help">

  <!-- get the environment variables -->
  <property environment="env"/>

  <tstamp>
    <format property="TODAY" pattern="yyyy-MMM-dd HH:mm:ss"/>
  </tstamp>

  <!-- ================================================================== -->
  <!-- ==== Properties                                                    -->
  <!-- ================================================================== -->

  <property file="./build.properties"/>

  <property name="src.dir" value="./src"/>
  <property name="test_src.dir" value="./test"/>
  <property name="etc.dir" value="./etc"/>
  <property name="lib.dir" value="./lib"/>
  <property name="deploy.dir" value="./output"/>

  <property name="staging.assembly.dir" value="${staging.base.dir}/${app.name}/assembly"/>
  <property name="staging.classes.dir" value="${staging.base.dir}/${app.name}/classes"/>
  <property name="staging.test_classes.dir" value="${staging.base.dir}/${app.name}/test_classes"/>
  <property name="staging.test_results.dir" value="${staging.base.dir}/${app.name}/test_results"/>

  <!-- load version.txt and extract version number from first line -->
  <loadfile srcFile="${etc.dir}/version.txt" property="version">
    <filterchain>
      <headfilter lines="1"/>
      <replaceregex pattern="^RDO v([\.0-9]+).*" replace="\1"/>
      <striplinebreaks/>
    </filterchain>
  </loadfile>

  <property name="staging.app.dir" value="${staging.base.dir}/${app.name}"/>
  <property name="staging.app.jar" value="${staging.app.dir}/${app.name}.jar"/>
  <property name="staging.sources.jar" value="${staging.app.dir}/${app.name}-src-${version}.jar"/>

  <pathconvert targetos="windows" property="windows.test_results.dir">
    <path location="${staging.test_results.dir}"/>
  </pathconvert>

  <!-- ================================================================== -->
  <!-- ==== Selectors                                                     -->
  <!-- ================================================================== -->

  <!-- ================================================================== -->
  <!-- ==== Paths and patternsets                                         -->
  <!-- ================================================================== -->

  <path id="app.classpath">
    <fileset dir="${lib.dir}">
      <include name="commons/commons-logging-1.1.3.jar"/>
      <include name="log4j/log4j-1.2.17.jar"/>
    </fileset>
  </path>

  <!-- classpath used to compile unit tests -->
  <path id="app.test.classpath">
    <path refid="app.classpath"/>
    <pathelement path="${staging.classes.dir}"/>
    <pathelement path="${lib.dir}/hsqldb/hsqldb.jar"/>
    <pathelement path="${lib.dir}/junit4/junit-4.11.jar"/>
    <pathelement path="${lib.dir}/junit4/hamcrest-core-1.3.jar"/>
    <pathelement path="${lib.dir}/junit4/hamcrest-library-1.3.jar"/>
    <pathelement path="${lib.dir}/mockito-1.9.5/mockito-all-1.9.5.jar"/>
    <pathelement path="${lib.dir}/mysql/mysql-connector-java-5.1.25-bin.jar"/>
  </path>

  <!-- ================================================================== -->
  <!-- ==== Targets (Preparation)                                         -->
  <!-- ================================================================== -->

  <target name="prepare">
    <mkdir dir="${staging.app.dir}"/>
    <mkdir dir="${staging.assembly.dir}"/>
    <mkdir dir="${staging.classes.dir}"/>
    <mkdir dir="${staging.test_classes.dir}"/>
    <mkdir dir="${staging.test_results.dir}"/>
  </target>

  <!-- ================================================================== -->
  <!-- ==== Targets (Destroy and Cleanup)                                 -->
  <!-- ================================================================== -->

  <target name="destroy">
    <delete dir="${staging.base.dir}/${app.name}" failonerror="false"/>
  </target>

  <!-- ================================================================== -->
  <!-- ==== Targets (Compilation)                                         -->
  <!-- ================================================================== -->

  <!-- Compile everything that has changed -->
  <target name="compile" depends="prepare">
    <javac srcdir="${src.dir}" destdir="${staging.classes.dir}" optimize="no" debug="yes"
           deprecation="${javac.deprecation}" includeAntRuntime="false">
      <classpath>
        <path refid="app.classpath"/>
      </classpath>
    </javac>
  </target>

  <target name="compile_tests" depends="compile">
    <javac srcdir="${test_src.dir}" destdir="${staging.test_classes.dir}" optimize="no" debug="yes"
           deprecation="$javac.deprecation}" includeAntRuntime="false">
      <classpath>
        <path refid="app.test.classpath"/>
      </classpath>
    </javac>
  </target>

  <!-- ================================================================== -->
  <!-- ==== Targets (Testing)                                             -->
  <!-- ================================================================== -->

  <macrodef name="test_macro">
    <attribute name="printsummary"/>
    <attribute name="usefile"/>
    <sequential>
      <echo message="============================================================================"/>
      <echo message="== For Linux   test results see: ${staging.test_results.dir}"/>
      <echo message="== For Windows test results see: explorer ${windows.test_results.dir}"/>
      <echo message="============================================================================"/>

      <junit printsummary="true" haltonfailure="true" outputtoformatters="true" showoutput="true">

        <classpath>
          <path refid="app.test.classpath"/>
          <pathelement path="${staging.test_classes.dir}"/>
        </classpath>

        <formatter type="plain" usefile="@{usefile}"/>
        <formatter type="plain" usefile="false"/>

        <batchtest todir="${staging.test_results.dir}">
          <fileset dir="${staging.test_classes.dir}">
            <or>
              <filename name="**/*Test.*"/>
            </or>
          </fileset>
        </batchtest>

      </junit>
    </sequential>
  </macrodef>

  <target name="test" depends="compile_tests, prepare">
    <test_macro printsummary="true" usefile="true"/>
  </target>

  <target name="test_d" depends="compile_tests, prepare">
    <test_macro printsummary="false" usefile="false"/>
  </target>

  <!-- ================================================================== -->
  <!-- ==== Targets (Packaging)                                           -->
  <!-- ================================================================== -->

  <target name="package" depends="compile, test">
    <sequential>
      <manifest file="${staging.assembly.dir}/MANIFEST.MF">
        <attribute name="Implementation-Title" value="CyLog Rapid Data Objects"/>
        <attribute name="Implementation-Vendor" value="CyLog Software"/>
        <attribute name="Implementation-Version" value="1.0.0"/>
        <attribute name="Built-Date" value="${TODAY}"/>
      </manifest>

      <jar destfile="${staging.app.jar}"
           manifest="${staging.assembly.dir}/MANIFEST.MF">
        <fileset dir="${staging.classes.dir}">
          <include name="**/*.class"/>
        </fileset>
        <fileset dir="${etc.dir}">
          <include name="log4j.properties"/>
          <include name="version.txt"/>
        </fileset>
      </jar>

      <jar destfile="${staging.sources.jar}"
           manifest="${staging.assembly.dir}/MANIFEST.MF">

        <fileset dir="${src.dir}">
          <include name="**/*.java"/>
        </fileset>
        <fileset dir="${etc.dir}">
          <include name="version.txt"/>
        </fileset>
      </jar>

    </sequential>
  </target>

  <!-- ================================================================== -->
  <!-- ==== Targets (Build and Deploy)                                    -->
  <!-- ================================================================== -->

  <target name="deploy" depends="package">
    <copy file="${staging.app.jar}/" todir="${deploy.dir}" preservelastmodified="true" />
    <copy file="${staging.sources.jar}/" todir="${deploy.dir}" preservelastmodified="true"/>
    <echo message="==== RDO v${version} deployed successfully! ===="/>
  </target>

  <!-- ================================================================== -->
  <!-- ==== Targets (Shortcuts)                                           -->
  <!-- ================================================================== -->

  <target name="d" depends="deploy"/>
  <target name="dd" depends="destroy, deploy"/>
  <target name="td" depends="test_d"/>

  <!-- ================================================================== -->
  <!-- ==== Targets (Help)                                                -->
  <!-- ================================================================== -->

  <target name="help">
    <echo>
      Build file for the RDO library v${version}

      Before building ensure the following environment variables are set:
      - WORK_HOME ...... = ${env.WORK_HOME}
      - STAGING_HOME ... = ${env.STAGING_HOME}
      - HSQLDB_HOME .... = ${env.HSQLDB_HOME} (UNIX-style forward slashes)

      Optional environment variables:
      - ANT_HOME ....... = ${env.ANT_HOME}
      - JAVA_HOME ...... = ${env.JAVA_HOME}

      Targets are:
      - prepare ..... Creates the Staging and Deployment directories
      - destroy ..... Destroys the Staging directories
      - compile ..... Compiles all java classes
      - test ........ Compiles and runs all tests
      - test_d ...... Compiles and runs all tests with detailed failure output on console
      - deploy ...... Packages the JAR file

      - deploy Copies the final JAR to the tango lib directory

      Shortcuts:
      - d ........... deploy
      - dd .......... destroy, deploy
      - td .......... test_d

    </echo>
  </target>

</project>

